
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// регистр ДенежныеСредства Расход
	Движения.ДенежныеСредства.Записывать = Истина;
	Движения.ДенежныеСредства.БлокироватьДляИзменения = Истина;
	
	Движение = Движения.ДенежныеСредства.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Период = Дата;
	Движение.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные;
	Движение.БанковскийСчетКасса = РасчетныйСчет;
	Движение.Сумма = СуммаДокумента;
	
	//регистр Бухгалтерии Хозрасчетный
	Движения.Хозрасчетный.Записывать = Истина;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписанияСРасчетногоСчета.СнятиеНаличныхВКассу Тогда 
		АналитикаПроводки = ПолучитьАналитикуПроводки();
		
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.СчетДт = АналитикаПроводки.СчетДебета;
		Движение.СчетКт = АналитикаПроводки.СчетКредита;
		Движение.Сумма = СуммаДокумента;
		Движение.Период = Дата;
		Движение.Содержание = АналитикаПроводки.СодержаниеОперации;
		БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, АналитикаПроводки.СубконтоДебет);
		БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(Движение.СчетКт, Движение.СубконтоКт, АналитикаПроводки.СубконтоКредит);
	КонецЕсли;
	
	Движения.Записать();
	
	//Проверка отрицательных остатков на счете
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса КАК РасчетныйСчет,
	|	ДенежныеСредстваОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(
	|			&МоментВремени,
	|			БанковскийСчетКасса = &РасчетныйСчет
	|				И ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)) КАК ДенежныеСредстваОстатки
	|ГДЕ
	|	ДенежныеСредстваОстатки.СуммаОстаток < 0";
	
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("РасчетныйСчет", РасчетныйСчет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Отказ = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("На счёте ""%1"" недостаточно денежных средств для расхода в размере %2", Выборка.РасчетныйСчет, Выборка.Сумма);
		Сообщение.Сообщить();
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьДанныеПоРеализацииТоваровИУслуг(ДанныеЗаполнения)

		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровИУслуг.Ссылка КАК ДокументОснование,
		|	РеализацияТоваровИУслуг.Клиент КАК Получатель,
		|	РеализацияТоваровИУслуг.ОбщаяСумма КАК СуммаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписанияСРасчетногоСчета.ВозвратПокупателю) КАК ВидОперации
		|ИЗ
		|	Документ.РеализацияТоваровИУслуг КАК РеализацияТоваровИУслуг
		|ГДЕ
		|	РеализацияТоваровИУслуг.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка 
	
КонецФункции // ПолучитьДанныеПоРеализацииТоваровИУслуг()


Функция ПолучитьДанныеПоПоступлениюТоваровИМатериалов(ДанныеЗаполнения)

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровИМатериалов.Ссылка КАК ДокументОснование,
		|	ПоступлениеТоваровИМатериалов.Поставщик КАК Получатель,
		|	ПоступлениеТоваровИМатериалов.ДоговорПоставщика КАК ДоговорКонтрагента,
		|	ПоступлениеТоваровИМатериалов.СуммаДокумента КАК СуммаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписанияСРасчетногоСчета.ОплатаПоставщику) КАК ВидОперации
		|ИЗ
		|	Документ.ПоступлениеТоваровИМатериалов КАК ПоступлениеТоваровИМатериалов
		|ГДЕ
		|	ПоступлениеТоваровИМатериалов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка

КонецФункции // ПолучитьДанныеПоПоступлениюТоваровИМатериалов() 

Функция ПолучитьДанныеПоПолучениюУслуг(ДанныеЗаполнения)

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеУслуг.Ссылка КАК ДоккументОснование,
		|	ПоступлениеУслуг.Поставщик КАК Получатель,
		|	ПоступлениеУслуг.ДоговорПоставщика КАК ДоговорКонтрагента,
		|	ПоступлениеУслуг.СуммаДокумента КАК СуммаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписанияСРасчетногоСчета.ОплатаПоставщику) КАК ВидОперации
		|ИЗ
		|	Документ.ПоступлениеУслуг КАК ПоступлениеУслуг
		|ГДЕ
		|	ПоступлениеУслуг.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка
	

КонецФункции // ПолучитьДанныеПоПолучениюУслуг()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	ТипДокументаОснования = ТипЗнч(ДанныеЗаполнения);
	
	ТипДокументаРеализацияТоваровИУслуг = Тип("ДокументСсылка.РеализацияТоваровИУслуг");
	ТипДокументаПоступлениеТоваровИМатериалов = Тип("ДокументСсылка.ПоступлениеТоваровИМатериалов");
	ТипДокументаПоступлениеУслуг = Тип("ДокументСсылка.ПоступлениеУслуг");
	
	ДанныеЗаполненияОснования = Новый Структура;
	
	Если ТипДокументаОснования = ТипДокументаРеализацияТоваровИУслуг Тогда 
		ДанныеЗаполненияОснования = ПолучитьДанныеПоРеализацииТоваровИУслуг(ДанныеЗаполнения);
	ИначеЕсли ТипДокументаОснования = ТипДокументаПоступлениеТоваровИМатериалов Тогда 
		ДанныеЗаполненияОснования = ПолучитьДанныеПоПоступлениюТоваровИМатериалов(ДанныеЗаполнения);
	ИначеЕсли ТипДокументаОснования = ТипДокументаПоступлениеУслуг Тогда 
		ДанныеЗаполненияОснования = ПолучитьДанныеПоПолучениюУслуг(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполненияОснования);
		
	
КонецПроцедуры

Функция ПолучитьАналитикуПроводки()

	ОплатаПоставщику = Перечисления.ВидыОперацийСписанияСРасчетногоСчета.ОплатаПоставщику;
	ВозвратПокупателю = Перечисления.ВидыОперацийСписанияСРасчетногоСчета.ВозвратПокупателю;
	ПеречислениеПодотчетнику = Перечисления.ВидыОперацийСписанияСРасчетногоСчета.ПеречислениеПодотчетномуЛицу;
	ПеречислениеЗароботнойПлаты = Перечисления.ВидыОперацийСписанияСРасчетногоСчета.ПеречислениеЗаработнойПлаты;
	
	СтруктураАналитики = Новый Структура;
	СтруктураАналитики.Вставить("СчетКредита", ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СтруктураАналитики.Вставить("СубконтоКредит", РасчетныйСчет);
	
	Если ВидОперации = ОплатаПоставщику Тогда 
		СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
		СтруктураАналитики.Вставить("СодержаниеОперации", "Оплата поставщику с расчетного счета");
		
	ИначеЕсли ВидОперации = ВозвратПокупателю Тогда
		СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
		СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
		СтруктураАналитики.Вставить("СодержаниеОперации", "Возврат средств покупателю с расчетного счета");
	ИначеЕсли ВидОперации = ПеречислениеПодотчетнику Тогда 
		СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
		СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
		СтруктураАналитики.Вставить("СодержаниеОперации", "Перечисление подотчетнику с расчетного счета");
	ИначеЕсли ВидОперации = ПеречислениеЗароботнойПлаты Тогда 
		СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
		СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
		СтруктураАналитики.Вставить("СодержаниеОперации", "Выплата заработной платы на счет сотрудника");
	КонецЕсли;
	
	Возврат СтруктураАналитики;
	
КонецФункции // ПолучитьАналитикуПроводки()

















































